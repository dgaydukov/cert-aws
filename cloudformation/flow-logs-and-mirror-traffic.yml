AWSTemplateFormatVersion: 2010-09-09

# create vpc with 2 public subnets
# Add vpc flow logs and save them to s3 (you can also save them to cloud-watch)
# You can use wireshart in target ec2 to monitor/analyze all traffic or just type `sudo tcpdump -nt -i eth0 udp port 4789` to see all incoming vxlan traffic

# !important => this template use ec2 of type t3a.nano which is not under free tier
# !important => we make auto-assign public ip = Enable for subnets, by setting MapPublicIpOnLaunch=true. Otherwise if you use AssociatePublicIpAddress:true, you will get `AssociatePublicIpAddress can't be used when you set NetworkInterfaceId property`
# !important => source should be of nitro type, otherwise when you create TrafficMirrorSession you got error `ENI must be attached to a supported instance`

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.100.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value:  !Sub ${AWS::StackName}-MyVpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-IGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.100.1.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-Public1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.100.2.0/24
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-Public2

  PublicRT1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-Public-RT1
  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRT1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRT2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-Public-RT2
  PublicRoute2:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRT2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway


  PublicSubnetRTAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRT1
  PublicSubnetRTAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRT2


  HttpSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access from anywhere
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-Http-SG
  SshSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access from anywhere
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-Ssh-SG
  VxlanSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable VXLAN access from anywhere
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: 4789
          ToPort: 4789
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-Ssh-SG

  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3a.nano
      ImageId: ami-09d95fab7fff3776c
      KeyName: mykey
      UserData:
        Fn::Base64:
          !Sub |
          #!/usr/bin/env bash
          sudo yum install httpd -y
          sudo service httpd start
          sudo echo "<h1>My App</h1>" > /var/www/html/index.html
      NetworkInterfaces:
        - DeviceIndex: 0
          NetworkInterfaceId: !Ref WebServerENI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-WebServer
  WebServerENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      GroupSet:
        - !GetAtt SshSG.GroupId
        - !GetAtt HttpSG.GroupId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-WebServerENI

  TargetInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-09d95fab7fff3776c
      KeyName: mykey
      NetworkInterfaces:
        - DeviceIndex: 0
          NetworkInterfaceId: !Ref TargetENI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-TrafficMirror
  TargetENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      GroupSet:
        - !GetAtt SshSG.GroupId
        - !GetAtt VxlanSG.GroupId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-TrafficMirrorENI

  FlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      LogDestinationType: s3
      LogDestination: !Join ["", ["arn:aws:s3:::", !Ref S3Bucket]]
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-myvpc-flowlog-all-logs


  TrafficMirrorTarget:
    DependsOn: TargetInstance
    Type: AWS::EC2::TrafficMirrorTarget
    Properties:
      Description: Mirror target associated with webserver ec2
      NetworkInterfaceId: !Ref TargetENI
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-TrafficMirrorTarget
  TrafficMirrorFilter:
    Type: AWS::EC2::TrafficMirrorFilter
    Properties:
      Description: traffic mirror filter
      NetworkServices:
        - amazon-dns
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-TrafficMirrorFilter
  AllowAllInboudTrafficRule:
    Type: AWS::EC2::TrafficMirrorFilterRule
    Properties:
      TrafficMirrorFilterId: !Ref TrafficMirrorFilter
      TrafficDirection: ingress
      DestinationCidrBlock: 0.0.0.0/0
      SourceCidrBlock: 0.0.0.0/0
      RuleAction: accept
      RuleNumber: 100
  AllowAllOutboundTrafficRule:
    Type: AWS::EC2::TrafficMirrorFilterRule
    Properties:
      TrafficMirrorFilterId: !Ref TrafficMirrorFilter
      TrafficDirection: egress
      DestinationCidrBlock: 0.0.0.0/0
      SourceCidrBlock: 0.0.0.0/0
      RuleAction: accept
      RuleNumber: 100
  TrafficMirrorSession:
    Type: AWS::EC2::TrafficMirrorSession
    Properties:
      Description: traffic mirror session
      NetworkInterfaceId: !Ref WebServerENI
      TrafficMirrorTargetId: !Ref TrafficMirrorTarget
      TrafficMirrorFilterId: !Ref TrafficMirrorFilter
      SessionNumber: 1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-TrafficMirrorSession
