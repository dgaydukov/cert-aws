AWSTemplateFormatVersion: 2010-09-09

# Create vpc with private & public subnet and one EC2 in each subnet
# !important => since our nat acts as proxy we should disable source/destination check by setting SourceDestCheck: false

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.100.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value:  !Sub ${AWS::StackName}-VPC-Bastion

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC-Bastion-IGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.100.1.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC-Bastion-Public

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.100.2.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC-Bastion-Private

  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC-Bastion-Public-RT
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC-Bastion-Private-RT
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRT
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NatEc2Instance


  PublicSubnetRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRT
  PrivateSubnetRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRT

  BastionEC2InstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH/ICMP access from internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC-Bastion-Bastion-SG
  # the !Ref function returns IDs for most resources, but it returns names for security groups, that's why we should use !GetAtt
  BastionEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-09d95fab7fff3776c
      KeyName: mykey
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnet
          GroupSet:
            - !GetAtt BastionEC2InstanceSG.GroupId
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC-Bastion-Bastion-EC2

  PrivateEC2InstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH/ICMP access from within vpc
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.100.0.0/16
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 10.100.0.0/16
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC-Bastion-Private-SG
  PrivateEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-09d95fab7fff3776c
      KeyName: mykey
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !GetAtt PrivateEC2InstanceSG.GroupId
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC-Bastion-Private-EC2

  NatEc2InstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP(S)/ICMP access from within vpc
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.100.0.0/16
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.100.0.0/16
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.100.0.0/16
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 10.100.0.0/16
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC-Bastion-Nat-SG
  NatEc2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-09d95fab7fff3776c
      SourceDestCheck: false
      KeyName: mykey
      UserData:
        Fn::Base64:
          !Sub |
          #!/usr/bin/env bash
          sysctl -w net.ipv4.ip_forward=1
          /sbin/iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnet
          GroupSet:
            - !GetAtt NatEc2InstanceSG.GroupId
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC-Bastion-Nat-EC2