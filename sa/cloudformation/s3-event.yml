AWSTemplateFormatVersion: 2010-09-09

# create s3 bucket with lambda notification (you can also use sqs/sns) + public policy
# See full list of supported events https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub ${AWS::StackName}-${AWS::Region}-my-s3-policy-bucket-123
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Function: !GetAtt S3NotificationLambda.Arn
  S3Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - s3:GetObject
            Resource:
              - !Join ["", ["arn:aws:s3:::", !Ref S3Bucket, "/*"]]

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-LambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowCreateLogGroupAndPutLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource: "*"
  S3NotificationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-S3NotificationLambda
      Description: Fire when s3 file uploaded
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs12.x
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = (event, context, cb) => {
            console.log(JSON.stringify(event, null, 2), JSON.stringify(context, null, 2));
          }
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-S3NotificationLambda
  S3NotificationLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt S3NotificationLambda.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt S3Bucket.Arn
