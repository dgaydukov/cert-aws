AWSTemplateFormatVersion: 2010-09-09

# Create codepipeline to deploy spring app to beanstalk

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.100.0.0/16
      Tags:
        - Key: Name
          Value:  !Sub ${AWS::StackName}-MyVpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-IGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.100.1.0/24
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-PublicSubnet
  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-PublicRT
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRT

#  WebServerSG:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      GroupDescription: Allow SSH & HTTP (8080) from anywhere
#      VpcId: !Ref VPC
#      SecurityGroupIngress:
#        - IpProtocol: tcp
#          FromPort: 22
#          ToPort: 22
#          CidrIp: 0.0.0.0/0
#        - IpProtocol: tcp
#          FromPort: 8080
#          ToPort: 8080
#          CidrIp: 0.0.0.0/0
#      Tags:
#        - Key: Name
#          Value: !Sub ${AWS::StackName}-MyVpc-WebServer-SG
#  WebServer:
#    Type: AWS::EC2::Instance
#    Properties:
#      InstanceType: t2.micro
#      ImageId: ami-09d95fab7fff3776c
#      KeyName: mykey
#      UserData:
#        Fn::Base64:
#          !Sub |
#          #!/usr/bin/env bash
#          sudo yum install java -y
#      NetworkInterfaces:
#        - AssociatePublicIpAddress: true
#          DeviceIndex: 0
#          SubnetId: !Ref PublicSubnet
#          GroupSet:
#            - !GetAtt WebServerSG.GroupId
#      BlockDeviceMappings:
#        - DeviceName: /dev/xvda
#          Ebs:
#            VolumeSize: 8
#      Tags:
#        - Key: Name
#          Value: !Sub ${AWS::StackName}-MyVpc-WebServer

  WebAppRepo:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: !Sub ${AWS::StackName}-webapp
      RepositoryDescription: SpringBoot webapp with tests
  BuildStage:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-BuildStage
      Description: Build project using spring boot 2
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: no_artifacts
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/java:openjdk-8
      Source:
        Location: !GetAtt WebAppRepo.CloneUrlHttp
        Type: CODECOMMIT
      TimeoutInMinutes: 10
  DeployStage:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub ${AWS::StackName}-DeployStage
      ComputePlatform: Lambda
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-CodeBuildRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowCloudWatchLogsAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: "*"








