AWSTemplateFormatVersion: 2010-09-09

# Create codepipeline to deploy spring app to ec2 (you push changes to CodeCommit repo, and then pipeline build + run tests + deploy your app to ec2)

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.100.0.0/16
      Tags:
        - Key: Name
          Value:  !Sub ${AWS::StackName}-MyVpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-IGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.100.1.0/24
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-PublicSubnet
  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-PublicRT
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRT

  WebServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH & HTTP (8080) from anywhere
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-WebServer-SG
  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: ami-09d95fab7fff3776c
      KeyName: mykey
      UserData:
        Fn::Base64:
          !Sub |
          #!/usr/bin/env bash
          sudo yum install java ruby wget -y
          wget https://aws-codedeploy-us-east-2.s3.us-east-2.amazonaws.com/latest/install
          chmod +x ./install
          sudo ./install auto
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnet
          GroupSet:
            - !GetAtt WebServerSG.GroupId
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-WebServer

  WebAppRepo:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: !Sub ${AWS::StackName}-webapp
      RepositoryDescription: SpringBoot webapp with tests
  BuildStage:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-BuildStage
      Description: Build project using spring boot 2
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: S3
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/java:openjdk-11
      Source:
        Location: !GetAtt WebAppRepo.CloneUrlHttp
        Type: CODECOMMIT
      TimeoutInMinutes: 10
  DeployStageApp:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub ${AWS::StackName}-DeployStageApp
      ComputePlatform: Server
  DeployStageGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref DeployStageApp
      DeploymentGroupName: !Sub ${AWS::StackName}-DeployStageGroup
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
#      Deployment:
#        Description: DeployWebAppToEc2
#        Revision:

      Ec2TagFilters:
        - Key: Name
          Type: KEY_AND_VALUE
          Value: !Sub ${AWS::StackName}-MyVpc-WebServer
#  CodePipeline:
#    Type: AWS::CodePipeline::Pipeline
#    Properties:
#      Name: !Sub ${AWS::StackName}-CodePipeline
#      RoleArn: !GetAtt CodePipelineRole.Arn
#      ArtifactStore:
#        Type: S3
#        Location: !Ref S3Bucket
#      Stages:
#        - Name: SourceStage
#          Actions:
#            - Name: SourceAction
#              ActionTypeId:
#                Category: Source
#                Owner: AWS
#                Provider: CodeCommit
#                Version: 1
#              Configuration:
#                RepositoryName: !GetAtt WebAppRepo.Name
#                BranchName: master
#              OutputArtifacts:
#                - Name: ArtifactSourceCode
#        - Name: BuildStage
#          Actions:
#            - Name: BuildAction
#              ActionTypeId:
#                Category: Build
#                Owner: AWS
#                Provider: CodeBuild
#                Version: 1
#              Configuration:
#                ProjectName: !Ref BuildStage
#              InputArtifacts:
#                - Name: ArtifactSourceCode
#              OutputArtifacts:
#                - Name: ArtifactBuild
#        - Name: DeployStage
#          Actions:
#            - Name: DeployAction
#              ActionTypeId:
#                Category: Deploy
#                Owner: AWS
#                Provider: CodeDeploy
#                Version: 1
#              Configuration:
#                ApplicationName: !Ref DeployStageApp
#                DeploymentGroupName: !Ref DeployStageGroup
#              InputArtifacts:
#                - Name: ArtifactBuild
#  S3Bucket:
#    Type: AWS::S3::Bucket
#    DeletionPolicy: Delete
#    Properties:
#      BucketName: !Sub ${AWS::StackName}-${AWS::Region}-s3-codepipeline-bucket-123

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref WebServerRole
  WebServerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-WebServerRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowS3GetAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:ListBucket
                Resource: "*"
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-CodePipelineRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowCodeCommitAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:UploadArchive
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:CancelUploadArchive
                Resource: "*"
  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-CodeDeployRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowS3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                Resource: "*"
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-CodeBuildRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowCloudWatchLogsAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: "*"
        - PolicyName: AllowS3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                Resource: "*"
        - PolicyName: AllowCodeCommitPull
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - codecommit:GitPull
                Resource: "*"








