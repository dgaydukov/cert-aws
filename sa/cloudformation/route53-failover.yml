AWSTemplateFormatVersion: 2010-09-09

# create 2 dns records of type A with IP addresses of 2 ec2
# to test, ssh to first ec2, and run `sudo service httpd stop`
# you can remove SecondaryHealthCheck, cause it's not mandatory to have healthcheck for secondary record, BUT doing so would guarantee in case second heathcheck fail, route53 would update dns record A to primary IP address

Parameters:
  MainDomain:
    Description: Second level domain (hosted zone)
    Default: aumingo.com
    Type: String
  SubDomain:
    Description: Third level domain (any string)
    Default: failover
    Type: String

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.100.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value:  !Sub ${AWS::StackName}-MyVpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-IGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.100.1.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-Public-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.100.2.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-Public-2

  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-Public-RT
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway


  PublicSubnet1RtAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRT
  PublicSubnet12RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRT

  WebServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH/HTTP access from anywhere
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-Public-SG

  PublicInstance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-09d95fab7fff3776c
      KeyName: mykey
      UserData:
        Fn::Base64:
          !Sub |
          #!/usr/bin/env bash
          sudo yum install httpd -y
          sudo service httpd start
          sudo echo "<h1>App 1</h1>" > /var/www/html/index.html
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnet1
          GroupSet:
            - !GetAtt WebServerSG.GroupId
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-Public-EC2-1

  PublicInstance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-09d95fab7fff3776c
      KeyName: mykey
      UserData:
        Fn::Base64:
          !Sub |
          #!/usr/bin/env bash
          sudo yum install httpd -y
          sudo service httpd start
          sudo echo "<h1>App 2</h1>" > /var/www/html/index.html
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnet2
          GroupSet:
            - !GetAtt WebServerSG.GroupId
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-Public-EC2-2

  PrimaryDnsRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Join ["", [!Ref MainDomain, "."]]
      Comment: DNS name for my primary sub-domain
      Name: !Join ["", [!Ref SubDomain, ".", !Ref MainDomain]]
      Type: A
      TTL: 30
      ResourceRecords:
          - !GetAtt PublicInstance1.PublicIp
      Failover: PRIMARY
      SetIdentifier: 1
      HealthCheckId: !Ref PrimaryHealthCheck
  PrimaryHealthCheck:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        IPAddress: !GetAtt PublicInstance1.PublicIp
        Port: 80
        Type: HTTP
        ResourcePath: /index.html
        RequestInterval: 10
        FailureThreshold: 2
      HealthCheckTags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-Primary-HealthCheck

  SecondaryDnsRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Join ["", [!Ref MainDomain, "."]]
      Comment: DNS name for my primary sub-domain
      Name: !Join ["", [!Ref SubDomain, ".", !Ref MainDomain]]
      Type: A
      TTL: 30
      ResourceRecords:
        - !GetAtt PublicInstance2.PublicIp
      Failover: SECONDARY
      SetIdentifier: 2
      HealthCheckId: !Ref SecondaryHealthCheck
  SecondaryHealthCheck:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        IPAddress: !GetAtt PublicInstance2.PublicIp
        Port: 80
        Type: HTTP
        ResourcePath: /index.html
        RequestInterval: 10
        FailureThreshold: 2
      HealthCheckTags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-Secondary-HealthCheck