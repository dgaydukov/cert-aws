AWSTemplateFormatVersion: 2010-09-09

# create lambda + 2 sqs queue (one for failed events, another for successful events) + second lambda that automatically triggers from queue of success events
# lambda put events into queue only in case of async call. If you call it sync then you can response, no point to put response into queue

# bad call, check it in dead letter queue:    aws lambda invoke --function-name=sqs-namecheck --invocation-type=Event --payload='{"user":"Jack"}' response.json
# good call, check it in another lambda logs: aws lambda invoke --function-name=sqs-namecheck --invocation-type=Event --payload='{"user":"Mike"}' response.json

# !important => for trigger (event source mapping) both fifo & standard queue supported, but for async destination - only standard
# !important => trigger lambda automatically removes messages from queue if it returns 200

Resources:
  DLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-DLQ
  CheckedNamesQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-CheckedNamesQueue

  NameCheckLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-NameCheckLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowSendMessage
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "sqs:SendMessage"
                Resource: "*"
  NameConcatLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-NameConcatLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowReceiveAndDeleteMessages
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                Resource: "*"
  LogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AllowCloudWatchLogsAccess
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource: "*"
      Roles:
        - !Ref NameCheckLambdaRole
        - !Ref NameConcatLambdaRole

  NameCheckLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-namecheck
      Description: Validate names
      Role: !GetAtt NameCheckLambdaRole.Arn
      Runtime: nodejs12.x
      Timeout: 10
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event, context, cb) => {
              // wait for 1 sec to imitate execution
              await new Promise(r => setTimeout(r, 1000));
              console.log(JSON.stringify(event, null, 2));
              if (event.user === "Jack"){
                cb("bad name", event);
              } else {
                cb(null, event);
              }
          }
  InvokeConfig:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      DestinationConfig:
        OnFailure:
          Destination: !GetAtt DLQ.Arn
        OnSuccess:
          Destination: !GetAtt CheckedNamesQueue.Arn
      FunctionName: !Ref NameCheckLambda
      MaximumEventAgeInSeconds: 300
      MaximumRetryAttempts: 1
      Qualifier: $LATEST

  NameConcatLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-NameConcatLambda
      Description: Concatenate names
      Role: !GetAtt NameConcatLambdaRole.Arn
      Runtime: nodejs12.x
      Timeout: 10
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event, context, cb) => {
              console.log(JSON.stringify(event, null, 2));
              cb(null, event);
          }
  SqsLambdaTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt CheckedNamesQueue.Arn
      FunctionName: !GetAtt NameConcatLambda.Arn
