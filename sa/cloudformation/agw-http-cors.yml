AWSTemplateFormatVersion: 2010-09-09

# Create api gateway + lambda (response to routes) + cors
# You can call either / or /info that would invoke lambda
# you can check cors by `curl -v -X OPTIONS -H 'Origin: http://site.io' -H 'Access-Control-Request-Method: PUT' {API_URL}`, you can add -X GET to test simple cors request directly (options is called by browser in case of non-simple request)
# You can change site to my.com, it would also work, yet other sites wouldn't (request would return 200, but no cors headers)

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-LambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
  LogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-LogPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "logs:DescribeLogStreams"
            Resource: "*"
      Roles:
        - !Ref LambdaRole
  InfoLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Show basic information about app
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs12.x
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = (event, context, cb) => {
              cb(null, {
                statusCode: 200,
                JSON.stringify({"msg": "HttpCors", event});,
                headers: {"Content-Type": "application/json"}
              });
          }
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Info
  ApiGatewayLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt InfoLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*/*

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: HTTP API CORS
      Description: Cors example using HTTP API
      ProtocolType: HTTP
      CorsConfiguration:
        AllowCredentials: true
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
        AllowOrigins:
          - "http://my.com"
          - "http://site.io"
      Tags:
        Name: !Sub ${AWS::StackName}-HttpApi
  DevStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: dev
      Description: Only for dev env
      ApiId: !Ref HttpApi
      AutoDeploy: true
  InfoIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      Description: Lambda Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InfoLambda.Arn}/invocations
      IntegrationMethod: POST
      ConnectionType: INTERNET
      PayloadFormatVersion: 1.0
      TimeoutInMillis: 5000
  MainRoute:
    DependsOn:
      - InfoIntegration
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: GET /
      Target: !Sub integrations/${InfoIntegration}
  InfoRoute:
    DependsOn:
      - InfoIntegration
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: GET /info
      Target: !Sub integrations/${InfoIntegration}