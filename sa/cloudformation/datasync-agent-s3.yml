AWSTemplateFormatVersion: 2010-09-09

# create nfs server (ec2 as on-premise nfs) + datasync agent (run on ec2) + 2 locations (1 for nfs and 1 for s3). Transfer data from nfs to s3
# go to datasync => tasks, and run task from datasync console
# we turned off integrity check (VerifyMode) for initial transfer to expedite it, once it done we should turn it on manually

# !important => to get datasync ami run this: aws ssm get-parameter --name=/aws/service/datasync/ami --region=us-east-1
# !important => to create agent you need to get activation key. Go to datasync aws console => create agent => Automatically get the activation key from your agent (enter ec2 IP address) => copy your key to this template
# !important => once you create agent with correct activationKey, http would be closed, so in security group it would still be opened, but http server for port 80 won't run on ec2 anymore
# !important => we can't use t2.micro for datasync ec2 agent, cause we got error when run task: Insufficient system memory. Minimum required is 4GiB; recommended is 16GiB

Parameters:
  BucketName:
    Description: Valid Bucket name.
    Default: s3-datasync-bucket-12345
    Type: String
  MountPoint:
    Description: Valid mount point.
    Default: /mnt/nfs-server
    Type: String

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.100.0.0/16
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-IGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.100.1.0/24
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-PublicSubnet
  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-Public-RT
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRT
  NfsServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access from anywhere and NFS access only from SG of datasync ec2 agent
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !GetAtt DatasyncAgentSG.GroupId
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-NfsServer-SG
  NfsServer:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-09d95fab7fff3776c
      KeyName: mykey
      UserData:
        Fn::Base64:
          !Sub |
          #!/usr/bin/env bash
          sudo mkfs.ext4 /dev/xvdb
          sudo mkdir ${MountPoint}
          sudo mount /dev/xvdb /mnt/nfs-server
          sudo echo "personal data" > ${MountPoint}/files.txt
          sudo echo "hello world!" > ${MountPoint}/data.txt
          echo "/mnt/nfs-server ${DatasyncAgent.PrivateIp}(rw)" > /etc/exports
          sudo exports -a
          sudo service nfs start
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnet
          GroupSet:
            - !GetAtt NfsServerSG.GroupId
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
        - DeviceName: /dev/xvdb
          Ebs:
            VolumeSize: 8
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-NfsServer

  DatasyncAgentSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH/HTTP access from anywhere
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-DatasyncAgent-SG
  DatasyncAgent:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.medium
      ImageId: ami-0ed23392fad2c0c06
      KeyName: mykey
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnet
          GroupSet:
            - !GetAtt DatasyncAgentSG.GroupId
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 160
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-DatasyncAgent

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub ${AWS::StackName}-${AWS::Region}-${BucketName}
  S3ReadPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource:
              - !Sub arn:aws:s3:::${S3Bucket}/*
  DataSyncS3LocationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-DataSyncS3LocationRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - datasync.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowS3FullAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource: "*"
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${AWS::StackName}-DataSync-LogGroup
      RetentionInDays: 7

# get key first, then uncomment and use this key
#  Agent:
#    Type: AWS::DataSync::Agent
#    Properties:
#      ActivationKey: A36EB-QPBL8-MQGGH-6CPP4-HOTVP
#      AgentName: !Sub ${AWS::StackName}-Agent
#  LocationNFS:
#    Type: AWS::DataSync::LocationNFS
#    Properties:
#      OnPremConfig:
#        AgentArns:
#          - !Ref Agent
#      ServerHostname: !GetAtt NfsServer.PrivateIp
#      Subdirectory: !Ref MountPoint
#  LocationS3:
#    Type: AWS::DataSync::LocationS3
#    Properties:
#      S3BucketArn: !GetAtt S3Bucket.Arn
#      S3Config:
#        BucketAccessRoleArn: !GetAtt DataSyncS3LocationRole.Arn
#      Subdirectory: /data
#  NfsToS3Task:
#    Type: AWS::DataSync::Task
#    Properties:
#      Name: !Sub ${AWS::StackName}-NfsToS3Task
#      SourceLocationArn: !GetAtt LocationNFS.LocationArn
#      DestinationLocationArn: !GetAtt LocationS3.LocationArn
#      CloudWatchLogGroupArn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup} # we use this, cause Arn return with `:*` at the end, and it failed to create
#      Options:
#        LogLevel: TRANSFER
#        VerifyMode: NONE
#      Excludes:
#        - FilterType: SIMPLE_PATTERN
#          Value: /lost+found
