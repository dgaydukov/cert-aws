AWSTemplateFormatVersion: 2010-09-09

#  For REST API after each change of template you have to redeploy it manually from console. Create rest api + body/header/querystring validation + cors + lambda integration.
#  Static values should be enclosed in both double & single quotes: "'static_value'"
#  VALIDATION
#  curl -H 'Content-type: application/json' -H 'user-id: 1' --data '{"name":"jack","age":30}' {API_URL}/custom?status=1
#  If you omit header/querystring you got exception: {"message": "Missing required request parameters: [user-id, status]"}. You can also require path variable to be present like `"method.request.path.profile_id": true`, but this is redundant cause if this is your path you can't call method without it
#  If body validation failed, you got exception: {"message": "Invalid request body"}. Yet body validation depends on `Content-type` header. So if you pass not `application/json`, you don't get this error.
#  TRANSFORMATION
#  RequestParameters for custom lambda integration: these event passed to invocation. For example in case of lambda it would be https://lambda.us-east-1.amazonaws.com/2015-03-31/functions/{LAMBDA_ARN}/invocations?state=456 and headers are passed as headers to these call, that's why inside lambda execution you won't see them
#  If you want to pass headers (or other data) to lambda and be able to get them from lambda you should add thm into RequestTemplates

#  CORS: curl -v -X OPTIONS -H 'Origin: http://site.io' -H 'Access-Control-Request-Method: PUT' {API_URL}/cors. Rest api out of the box support only 1 cors origin. If you want to test multiple origins you have to create custom lambda
# multiple origin with lambda: curl -v -X OPTIONS -H 'Origin: http://site.io' -H 'Access-Control-Request-Method: PATCH' {API_URL}/multicors

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-LambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
  LogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-LogPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "logs:DescribeLogStreams"
            Resource: "*"
      Roles:
        - !Ref LambdaRole
  InfoLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-InfoLambda
      Description: Show basic information about app
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs12.x
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = (event, context, cb) => {
              //proxy integration
              if (event.resource == "/proxy") {
                cb(null, {
                  statusCode: 200,
                  headers: {"Content-Type": "application/json"},
                  body: JSON.stringify({"msg": "ProxyIntegration", event})
                });
              } else if (event.resource == "/custom") {
                  cb(null, {"msg": "CustomIntegration", event});
              } else {
                cb(null, {"msg": "default", event, context});
              }
          }
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-InfoLambda
  ApiGatewayLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt InfoLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*


  MultiCorsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-MultiCorsLambda
      Description: Return multiple cors
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs12.x
      Handler: index.handler
      Code:
        ZipFile: |
          // you should also validate Access-Control-Request-Method header. Here we omit it for simplicity
          const ALLOWED_ORIGIN = {"http://site.io": 1, "http://my.com": 1};
          exports.handler = (event, context, cb) => {
              var origin = event.headers == null ? null : event.headers.origin;
              if(ALLOWED_ORIGIN[origin] === 1){
                cb(null, {
                  statusCode: 200,
                  headers: {
                    "Access-Control-Allow-Origin" : origin,
                    "Access-Control-Allow-Headers" : "*",
                    "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, PATCH"
                  },
                  body: ""
                });
              } else {
                cb(null, {
                  statusCode: 403,
                  headers: {"Content-Type": "application/json"},
                  body: `Unsupported cors origin: ${origin}`
                });
              }
          }
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MultiCorsLambda
  ApiGatewayMultiCorsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt MultiCorsLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Cors example using REST API
      Name: REST API CORS
      EndpointConfiguration:
        Types:
          - REGIONAL

  ProxyIntegrationResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: proxy
  ProxyIntegrationMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ProxyIntegrationResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InfoLambda.Arn}/invocations

  CustomIntegrationResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: custom
  CustomIntegrationMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref CustomIntegrationResource
      HttpMethod: ANY
      AuthorizationType: NONE
      RequestValidatorId: !Ref PersonRequestValidator
      RequestParameters:
        "method.request.header.user-id": true
        "method.request.querystring.status": true
      RequestModels:
        application/json: PersonModel
      MethodResponses:
        - StatusCode: 200
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InfoLambda.Arn}/invocations
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '#set ($root=$input.path("$")) { "name":"$root.name", "age":"$root.age", "resource":"/custom"}'
        RequestParameters:
          "integration.request.header.profile-id": "'123'"
          "integration.request.querystring.state": "'456'"
        IntegrationResponses:
          - StatusCode: 200
  PersonRequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: PersonRequestValidator
      RestApiId: !Ref RestApi
      ValidateRequestBody: true
      ValidateRequestParameters: true
  PersonModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref RestApi
      ContentType: application/json
      Description: Model of Person
      Name: PersonModel
      Schema:
        "$schema": "http://json-schema.org/draft-04/schema#"
        title: UserModel
        type: object
        required:
          - name
          - age
        properties:
          name:
            type: string
          age:
            type: integer

  MockIntegrationMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !GetAtt RestApi.RootResourceId
      HttpMethod: ANY
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: '{"msg":"mock integration"}'

  CorsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: cors
  CorsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref CorsResource
      HttpMethod: ANY
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InfoLambda.Arn}/invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'http://site.io'"
              method.response.header.Access-Control-Allow-Methods: "'GET, POST, PUT, DELETE, PATCH'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
  CorsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref CorsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'http://site.io'"
              method.response.header.Access-Control-Allow-Methods: "'GET, POST, PUT, DELETE, PATCH'"
              method.response.header.Access-Control-Allow-Headers: "'*'"

  MultiCorsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: multicors
  MultiCorsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref MultiCorsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MultiCorsLambda.Arn}/invocations

  Deployment:
    DependsOn:
      - ProxyIntegrationMethod
      - CustomIntegrationMethod
      - MockIntegrationMethod
      - CorsMethod
      - CorsOptionsMethod
      - MultiCorsMethod
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestApi
      Description: My deployment
  DevStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: dev
      Description: Dev Stage
      RestApiId: !Ref RestApi
      DeploymentId: !Ref Deployment