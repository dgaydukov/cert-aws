AWSTemplateFormatVersion: 2010-09-09

# create vpc with 2 public subnets, and one asg
# you can either terminate instance and asg will create new one, or run: stress --cpu 1 --timeout 180. after some time it will delete old
# !important => we define a list of subnet (or single - not desired cause whole point of auto-scaling is to be able to recover in another AZ) in AutoScalingGroup, not in launch config

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.100.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value:  !Sub ${AWS::StackName}-MyVpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-IGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.100.1.0/24
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-Public1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.100.2.0/24
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-Public2

  PublicRT1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-Public-RT1
  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRT1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRT2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-Public-RT2
  PublicRoute2:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRT2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRTAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRT1
  PublicSubnetRTAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRT2

  PublicEC2InstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH/HTTP access from anywhere
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-Public-SG

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      LaunchConfigurationName: !Sub ${AWS::StackName}-LaunchConfig
      InstanceType: t2.micro
      ImageId: ami-09d95fab7fff3776c
      KeyName: mykey
      AssociatePublicIpAddress: true
      UserData:
        Fn::Base64:
          !Sub |
          #!/usr/bin/env bash
          sudo yum install httpd -y
          sudo service httpd start
          sudo echo "<h1>Hello World => $(shuf -i 99-999 -n 1)</h1>" > /var/www/html/index.html
          sudo amazon-linux-extras install epel -y
          sudo yum install stress -y
      SecurityGroups:
        - !GetAtt PublicEC2InstanceSG.GroupId
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-MyVpc-ASG
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: 1
      MaxSize: 4
      HealthCheckGracePeriod: 10
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
  CpuAbove80ScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 80
