AWSTemplateFormatVersion: 2010-09-09

# Create spot request of maintain type (if we terminate ec2 instance, request will notice this and fetch new spot instance for us, in case they are available in the pool)
# Create event to catch 2 minutes before aws would terminate our spot instance. Now only log it, but you can add lambda as target and do whatever you want there
# !important => use PassRole if you want to run ec2 instance with some role

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.100.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value:  !Sub ${AWS::StackName}-MyVpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-IGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.100.2.0/24
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-Public
  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-Public-RT
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRT

  SshHttpSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH/HTTP access from anywhere
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-SshHttpSG
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-LaunchTemplate
      LaunchTemplateData:
        InstanceType: t2.micro
        KeyName: mykey
        ImageId: ami-09d95fab7fff3776c
        UserData:
          Fn::Base64:
            !Sub |
            #!/usr/bin/env bash
            sudo yum install httpd -y
            sudo service httpd start
            sudo echo "<h1>App #$(shuf -i 100-1000 -n 1)</h1>" > /var/www/html/index.html
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            SubnetId: !Ref PublicSubnet
            Groups:
              - !GetAtt SshHttpSG.GroupId

  SpotFleetManagerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-SpotFleetManagerRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - spotfleet.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: SpotFleetManagerPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:DescribeImages"
                  - "ec2:DescribeSubnets"
                  - "ec2:RequestSpotInstances"
                  - "ec2:TerminateInstances"
                  - "ec2:DescribeInstanceStatus"
                  - "ec2:CreateTags"
                  - "ec2:RunInstances"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource: "*"

  SpotFleet:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        Type: maintain
        IamFleetRole: !GetAtt SpotFleetManagerRole.Arn
        SpotPrice: 0.004
        TargetCapacity: 1
        LaunchTemplateConfigs:
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/events/${AWS::StackName}-LogGroup
      RetentionInDays: 7
  SpotInstanceTerminationNoticeEvent:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub ${AWS::StackName}-SpotInstanceTerminationNoticeEvent
      Description: Fire 2 minutes before aws would terminate our spot instance
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - EC2 Spot Instance Interruption Warning
      Targets:
        - Arn: !GetAtt LogGroup.Arn
          Id: StateChangeLogGroup