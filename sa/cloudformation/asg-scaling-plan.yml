AWSTemplateFormatVersion: 2010-09-09

# Create auto-scaling group + target scaling policy (represented by scaling plan). Notice that MinCapacity/MaxCapacity from scaling plan would overwrite MinSize/MaxSize from ASG.
# By default AutoScalingGroup, will recover any failed ec2 (so if you terminate one, it would be restored)
# !important => although we use TagFilters, but ec2 doesn't have any tags, tracking policy would still be executed. So we don't need them, but you should use them, cause you can't create scaling plan without it
# !important => ScalingPlan adds predictive scaling out-of-the-box

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.100.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value:  !Sub ${AWS::StackName}-MyVpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-IGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.100.1.0/24
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-Public
  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-Public-RT
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRT

  WebServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH/HTTP access from anywhere
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-WebServer-SG
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      LaunchConfigurationName: !Sub ${AWS::StackName}-LaunchConfig
      InstanceType: t2.micro
      ImageId: ami-09d95fab7fff3776c
      KeyName: mykey
      AssociatePublicIpAddress: true
      UserData:
        Fn::Base64:
          !Sub |
          #!/usr/bin/env bash
          sudo yum install httpd -y
          sudo service httpd start
          sudo echo "<h1>App #$(shuf -i 99-999 -n 1)</h1>" > /var/www/html/index.html
          sudo amazon-linux-extras install epel -y
          sudo yum install stress -y
      SecurityGroups:
        - !GetAtt WebServerSG.GroupId
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-MyVpc-ASG
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: 1
      MaxSize: 4
      HealthCheckGracePeriod: 10
      VPCZoneIdentifier:
        - !Ref PublicSubnet
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: !Sub ${AWS::StackName}-MyVpc-PublicInstance
        - Key: RequireAutoScaling
          PropagateAtLaunch: true
          Value: Yes

  ScalingPlan:
    Type: AWS::AutoScalingPlans::ScalingPlan
    Properties:
      ApplicationSource:
        TagFilters:
          - Key: RequireAutoScaling
            Values:
              - Yes
      ScalingInstructions:
        - MinCapacity: 1
          MaxCapacity: 6
          ServiceNamespace: autoscaling
          ScalableDimension: autoscaling:autoScalingGroup:DesiredCapacity
          ResourceId: !Sub autoScalingGroup/${ASG}
          TargetTrackingConfigurations:
            - PredefinedScalingMetricSpecification:
                PredefinedScalingMetricType: ASGAverageCPUUtilization
              TargetValue: 80
